Index: acpithinkpad.c
===================================================================
RCS file: /cvs/src/sys/dev/acpi/acpithinkpad.c,v
retrieving revision 1.34
diff -u -r1.34 acpithinkpad.c
--- acpithinkpad.c	4 Nov 2013 11:57:26 -0000	1.34
+++ acpithinkpad.c	16 Feb 2014 16:31:11 -0000
@@ -79,12 +79,23 @@
 #define	THINKPAD_BACKLIGHT_CHANGED	0x6050
 #define	THINKPAD_SWITCH_WIRELESS	0x7000
 
-#define THINKPAD_NSENSORS 9
-#define THINKPAD_NTEMPSENSORS 8
+#define THINKPAD_NSENSORS		10
+#define THINKPAD_NTEMPSENSORS		8
 
 #define THINKPAD_ECOFFSET_FANLO		0x84
 #define THINKPAD_ECOFFSET_FANHI		0x85
 
+#define	THINKPAD_ECOFFSET_FANLEVEL	0x2f
+
+#define	THINKPAD_ECFANLEVEL_AUTO	7
+
+/* highest temperatures (from any sensor) allowed at each fan level (after
+ * level 2's max temp, it will be put in auto mode) */
+#define	THINKPAD_MAX_TEMP_LEVEL1	54
+#define	THINKPAD_MAX_TEMP_LEVEL2	60
+
+int	staged_temp_setting = 0;
+ 
 struct acpithinkpad_softc {
 	struct device		 sc_dev;
 
@@ -110,6 +121,7 @@
 int	thinkpad_volume_mute(struct acpithinkpad_softc *);
 int	thinkpad_brightness_up(struct acpithinkpad_softc *);
 int	thinkpad_brightness_down(struct acpithinkpad_softc *);
+void	thinkpad_set_fan_level(struct acpithinkpad_softc *, uint8_t);
 
 void    thinkpad_sensor_attach(struct acpithinkpad_softc *sc);
 void    thinkpad_sensor_refresh(void *);
@@ -171,14 +183,23 @@
 	sc->sc_sens[i].type = SENSOR_FANRPM;
 	sensor_attach(&sc->sc_sensdev, &sc->sc_sens[i]);
 
+	/* Add fan level */
+	i += 1;
+	strlcpy(sc->sc_sens[i].desc,"fan level",sizeof(sc->sc_sens[i].desc));
+	sc->sc_sens[i].type = SENSOR_INTEGER;
+	sensor_attach(&sc->sc_sensdev, &sc->sc_sens[i]);
+
 	sensordev_install(&sc->sc_sensdev);
+
+	/* Initialize fan level to auto */
+	thinkpad_set_fan_level(sc, THINKPAD_ECFANLEVEL_AUTO);
 }
 
 void
 thinkpad_sensor_refresh(void *arg)
 {
 	struct acpithinkpad_softc *sc = arg;
-	u_int8_t lo, hi, i;
+	u_int8_t lo, hi, i, fanlevel, maxtemp = 0;
 	int64_t tmp;
 	char sname[5];
 
@@ -190,12 +211,43 @@
 		sc->sc_sens[i].value = (tmp * 1000000) + 273150000;
 		if (tmp > 127 || tmp < -127)
 			sc->sc_sens[i].flags = SENSOR_FINVALID;
+		else if (tmp > maxtemp)
+			maxtemp = tmp;
 	}
 
 	/* Read fan RPM */
 	acpiec_read(sc->sc_ec, THINKPAD_ECOFFSET_FANLO, 1, &lo);
 	acpiec_read(sc->sc_ec, THINKPAD_ECOFFSET_FANHI, 1, &hi);
 	sc->sc_sens[i].value = ((hi << 8L) + lo);
+
+	/* Read fan level */
+	acpiec_read(sc->sc_ec, THINKPAD_ECOFFSET_FANLEVEL, 1, &fanlevel);
+	sc->sc_sens[i + 1].value = fanlevel;
+
+	/* Set the level according to the highest temperature just seen */
+	if (!maxtemp || (maxtemp > THINKPAD_MAX_TEMP_LEVEL2)) {
+		if (fanlevel != THINKPAD_ECFANLEVEL_AUTO) {
+			if (staged_temp_setting == THINKPAD_ECFANLEVEL_AUTO)
+				thinkpad_set_fan_level(sc,
+					THINKPAD_ECFANLEVEL_AUTO);
+			else
+				staged_temp_setting = THINKPAD_ECFANLEVEL_AUTO;
+		}
+	} else if (maxtemp > THINKPAD_MAX_TEMP_LEVEL1) {
+		if (fanlevel != 3) {
+			if (staged_temp_setting == 3)
+				thinkpad_set_fan_level(sc, 3);
+			else
+				staged_temp_setting = 3;
+		}
+	} else if (maxtemp <= THINKPAD_MAX_TEMP_LEVEL1) {
+		if (fanlevel != 2) {
+			if (staged_temp_setting == 2)
+				thinkpad_set_fan_level(sc, 2);
+			else
+				staged_temp_setting = 2;
+		}
+	}
 }
 
 void
@@ -453,4 +505,10 @@
 thinkpad_brightness_down(struct acpithinkpad_softc *sc)
 {
 	return (thinkpad_cmos(sc, THINKPAD_CMOS_BRIGHTNESS_DOWN));
+}
+
+void
+thinkpad_set_fan_level(struct acpithinkpad_softc *sc, uint8_t level)
+{
+	acpiec_write(sc->sc_ec, THINKPAD_ECOFFSET_FANLEVEL, 1, &level);
 }
